{"version":3,"sources":["ExtraCookieTypeManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/Script/Data","sourcesContent":["\nconst {ccclass, property} = cc._decorator;\n\nexport const CookieMax_X: number = 9;\nexport const CookieMax_Y: number = 9;\n\nexport enum CookieType {\n    Sprite_0,\n    Sprite_1,\n    Sprite_2,\n    Sprite_3,\n    Sprite_4,\n    Sprite_5,\n\n    CookieTypeCount,\n\n    NONE        //特殊类型，不通过三个相同类型消除\n}\nexport enum CookieExtraType {\n    Extra_Normal = 0,            //普通cookie\n    Extra_Line_Horizontal = 1,   //\n    Extra_Line_Vertical = 2,     //\n    Extra_Bomb = 3,\n    Extra_All = 4,               //\n\n    CookieTypeMax,\n};\n\n//CookieTypeAndColumnRow\nexport interface CookieTypeObject {\n    normalType: CookieType;\n    extraType: CookieExtraType;\n    pos_X: number;\n    pos_Y: number;\n    isOpetation: boolean;\n    isExtraTriger: boolean;\n};\n\nlet g_cookieDataMgr: ExtraCookieTypeManager = null;\n\n@ccclass\nexport default class ExtraCookieTypeManager extends cc.Component {\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n\n\n    public static getInstance():ExtraCookieTypeManager\n    {\n        if (g_cookieDataMgr == null)\n        {\n            g_cookieDataMgr = new ExtraCookieTypeManager();\n        }\n        return g_cookieDataMgr;\n    }\n\n    public getExtraCookieTypeByChain(chains: Array<CookieTypeObject>): CookieTypeObject\n    {\n        if (chains.length <= 0) { return null; }\n        //检测是否有同类型连续cookie\n        let continueXCountArray: Array<number> = [];                    //x方向每列cookie数量\n        let continueYCountArray: Array<number> = [];                    //y方向每行cookie数量\n        let cookieTypeArray: Array<CookieType> = [];                    //每种类型的cookie的数量\n        let continueChainsAll_X: Array<Array<CookieTypeObject>> = [];   //x方向所有连续的chain\n        let continueChainsAll_Y: Array<Array<CookieTypeObject>> = [];   //y方向所有连续的chain\n        let combineSameTypeChains: Array<Array<CookieTypeObject>> = []; //\n        for (let index = 0; index < CookieMax_X; index++) {\n            continueXCountArray[index] = 0;\n        }\n        for (let index = 0; index < CookieMax_Y; index++) {\n            continueYCountArray[index] = 0;\n        }\n        for (let index = 0; index < CookieType.CookieTypeCount; index++) {\n            cookieTypeArray.push(0);\n        }\n        //cookie信息统计\n        for (let index = 0; index < chains.length; index++) {\n            const element = chains[index];\n            continueXCountArray[element.pos_X]++;\n            continueYCountArray[element.pos_Y]++;\n            cookieTypeArray[element.normalType]++;\n        }\n        //cookie信息分析\n        for (let index_Type = 0; index_Type < cookieTypeArray.length; index_Type++) {\n            const typeCount = cookieTypeArray[index_Type];  //extra类型，同类型至少达到4个\n            if (typeCount >= 4)\n            {\n                //y固定沿着x方向检测\n                for (let index_Y = 0; index_Y < continueYCountArray.length; index_Y++) {\n                    const yCount = continueYCountArray[index_Y];\n                    if (yCount >= 3)\n                    {\n                        let tmpArray: Array<CookieTypeObject> = [];\n                        for (let index_X = 0; index_X < chains.length; index_X++) {\n                            const startObj = chains[index_X];\n                            if (startObj.normalType == index_Type && startObj.pos_Y == index_Y)\n                            {\n                                tmpArray.push(startObj);\n                            }\n                        }\n\n                        tmpArray.sort(this.comparison_function_X);\n\n\n\n\n\n\n\n                        if (tmpArray.length >= 3)\n                        {\n                            let itemArray: Array<CookieTypeObject> = [];\n                            for (let i = 0; i < tmpArray.length - 2;) {\n                                itemArray = [];\n                                let element = tmpArray[i];\n                                itemArray.push(element);\n                                let j = i + 1\n                                for (; j < tmpArray.length; j++) {\n                                    const ele = tmpArray[j];\n                                    if (Math.abs(element.pos_X - ele.pos_X) == 1)\n                                    {\n                                        element = ele;\n                                        itemArray.push(ele);\n                                    }\n                                    else \n                                    {\n                                        break;\n                                    }\n                                    \n                                }\n                                if (itemArray.length >= 3)\n                                {\n                                    continueChainsAll_X.push(itemArray);\n                                    i = j;\n                                }\n                                else\n                                {\n                                    i++;\n                                }\n                            }\n                        }\n                    }\n                }\n                //x固定沿着y方向\n                for (let index_X = 0; index_X < continueXCountArray.length; index_X++) {\n                    const xCount = continueXCountArray[index_X];\n                    if (xCount >= 3)\n                    {\n                        let tmpArray: Array<CookieTypeObject> = [];\n                        for (let index_Y = 0; index_Y < chains.length; index_Y++) {\n                            const startObj = chains[index_Y];\n                            if (startObj.normalType == index_Type && startObj.pos_X == index_X)\n                            {\n                                tmpArray.push(startObj);\n                            }\n                        }\n\n                        tmpArray.sort(this.comparison_function_Y);\n\n\n\n                        if (tmpArray.length >= 3)\n                        {\n                            let itemArray: Array<CookieTypeObject> = [];\n                            for (let i = 0; i < tmpArray.length - 2;) {\n                                itemArray = [];\n                                let element = tmpArray[i];\n                                itemArray.push(element);\n                                let j = i + 1\n                                for (; j < tmpArray.length; j++) {\n                                    const ele = tmpArray[j];\n                                    if (Math.abs(element.pos_Y - ele.pos_Y) == 1)\n                                    {\n                                        element = ele;\n                                        itemArray.push(ele);\n                                    }\n                                    else\n                                    {\n                                        break;\n                                    }\n                                }\n                                if (itemArray.length >= 3)\n                                {\n                                    continueChainsAll_Y.push(itemArray);\n                                    i = j;\n                                }\n                                else \n                                {\n                                    i++;\n                                }\n                            }\n                        }\n                    }\n                }\n                //combine x and y direction chains\n                if (continueChainsAll_X.length > 0 && continueChainsAll_Y.length > 0)\n                {\n                    //  横、竖重叠的要合并成一个array\n                    for (let index_H = 0; index_H < continueChainsAll_X.length; index_H++) {\n                        const element_H = continueChainsAll_X[index_H];\n                        let hasSameCookie: boolean = false;\n                        for (let index_V = 0; index_V < continueChainsAll_Y.length; index_V++) {\n                            const element_V = continueChainsAll_Y[index_V];\n                            if (this.hasSameElementTwoArray(element_H, element_V))\n                            {\n                                hasSameCookie = true;\n                                //combine\n                                let combineArray: Array<CookieTypeObject> = [];\n                                for (const key in element_H) {\n                                    if (element_H.hasOwnProperty(key)) {\n                                        const element = element_H[key];\n                                        combineArray.push(element);\n                                    }\n                                }\n                                continueChainsAll_X[index_H] = [];\n                                for (const k_V in element_V) {\n                                    if (element_V.hasOwnProperty(k_V))\n                                    {\n                                        const ele = element_V[k_V];\n                                        let hasSame = false;\n                                        for (let index = 0; index < combineArray.length; index++)\n                                        {\n                                            const e = combineArray[index];\n                                            if (ele.pos_X == e.pos_X && ele.pos_Y == e.pos_Y)\n                                            {\n                                                hasSame = true;\n                                                break;\n                                            }\n                                        }\n                                        if (!hasSame)\n                                        {\n                                            combineArray.push(ele);\n                                        }\n                                    }\n                                }\n                                continueChainsAll_Y[index_V] = [];\n                                combineSameTypeChains.push(combineArray);\n                                break;\n                            }\n                        }\n                        if (!hasSameCookie)\n                        {\n                            combineSameTypeChains.push(element_H);\n                        }\n                    }\n                    for (let index_V = 0; index_V < continueChainsAll_Y.length; index_V++)\n                    {\n                        const element_V = continueChainsAll_Y[index_V];\n                        if (element_V.length > 0)\n                        {\n                            combineSameTypeChains.push(element_V);\n                        }\n                    }\n\n\n                }\n                else\n                {\n                    if (continueChainsAll_X.length > 0) { combineSameTypeChains = continueChainsAll_X; }\n                    if (continueChainsAll_Y.length > 0) { combineSameTypeChains = continueChainsAll_Y; }\n                }\n\n\n            }\n        }\n\n\n        for (let index = 0; index < combineSameTypeChains.length; index++) {\n            const element = combineSameTypeChains[index];\n            let obj = this.getExtraCookieTypeBySameTypeChain(element);\n            if (obj != null)\n            {\n                return obj;\n            }\n        }\n\n\n\n    }\n\n    public hasSameElementTwoArray(firstArray: Array<CookieTypeObject>, lastArray: Array<CookieTypeObject>): boolean\n    {\n        let hasSameElement = false;\n        for (const key_first in firstArray) {\n            if (firstArray.hasOwnProperty(key_first)) {\n                const element_first: CookieTypeObject = firstArray[key_first];\n                for (const key_last in lastArray) {\n                    if (lastArray.hasOwnProperty(key_last)) {\n                        const element_last = lastArray[key_last];\n                        if (element_first.pos_X == element_last.pos_X && element_first.pos_Y == element_last.pos_Y)\n                        {\n                            hasSameElement = true;\n                            break;\n                        }\n                    }\n                }\n                if (hasSameElement)\n                {\n                    break;\n                }\n            }\n        }\n        return hasSameElement;\n    }\n\n    private getExtraCookieTypeBySameTypeChain(chains: Array<CookieTypeObject>): CookieTypeObject\n    {\n        if (chains.length <= 3) { return null; }\n\n        let normalType = CookieType.CookieTypeCount;\n        let extraType = CookieExtraType.Extra_Normal;\n        let target_X = CookieMax_X;\n        let target_Y = CookieMax_Y;\n        let maxXArray: Array<number> = [];\n        let maxYArray: Array<number> = [];\n        let cookieNormalTypeArray: Array<CookieType> = [];\n        for (let index = 0; index < CookieMax_X; index++) {\n            maxXArray[index] = 0;\n        }\n        for (let index = 0; index < CookieMax_Y; index++) {\n            maxYArray[index] = 0;\n        }\n        for (let index = 0; index < CookieType.CookieTypeCount; index++) {\n            cookieNormalTypeArray.push(0);\n        }\n        let hasOpetation: Boolean = false;\n        for (let index = 0; index < chains.length; index++) \n        {\n            const element = chains[index];\n            maxXArray[element.pos_X]++;\n            maxYArray[element.pos_Y]++;\n            cookieNormalTypeArray[element.normalType]++;\n            if (element.isOpetation) \n            {\n                hasOpetation = true;\n                target_X = element.pos_X;\n                target_Y = element.pos_Y;\n            }\n            if (index == 0)\n            {\n                normalType = element.normalType;\n            }\n        }\n        //  如果消除组不是同样的普通类型的无法产生特殊cookie\n        let cookieTypeCount = 0;\n        for (let index = 0; index < cookieNormalTypeArray.length; index++) {\n            const element = cookieNormalTypeArray[index];\n            if (element > 1)\n            {\n                cookieTypeCount++;\n            }\n        }\n        if (cookieTypeCount > 1)\n        {\n            return null;\n        }\n        let maxCountValueX = maxXArray[0];\n        let maxCountValueY = maxYArray[0];\n        let maxX = 0;\n        let maxY = 0;\n        for (let index = 1; index < maxXArray.length; index++) {\n            const element = maxXArray[index];\n            if (element > maxCountValueX)\n            {\n                maxCountValueX = element;\n                maxX = index;\n            }\n        }\n        for (let index = 0; index < maxYArray.length; index++) {\n            const element = maxYArray[index];\n            if (element > maxCountValueY)\n            {\n                maxCountValueY = element;\n                maxY = index;\n            }\n        }\n        if (maxCountValueX >= 5 || maxCountValueY >= 5)\n        {\n            extraType = CookieExtraType.Extra_All;\n            normalType = CookieType.NONE;\n        }\n        else if (maxCountValueX >= 3 && maxCountValueY >= 3)\n        {\n            extraType = CookieExtraType.Extra_Bomb;\n        }\n        else\n        {\n            extraType = maxCountValueX > 3 ? CookieExtraType.Extra_Line_Horizontal : CookieExtraType.Extra_Line_Vertical;\n        }\n        //掉落时自动产生的\n        if (!hasOpetation)\n        {\n            if (extraType == CookieExtraType.Extra_Line_Horizontal || extraType == CookieExtraType.Extra_Line_Vertical)\n            {\n                const element = chains[1];\n                target_X = element.pos_X;\n                target_Y = element.pos_Y;\n            }\n            else if (extraType == CookieExtraType.Extra_All)\n            {\n                const element = chains[2];\n                target_X = element.pos_X;\n                target_Y = element.pos_Y;\n            }\n            else\n            {\n                target_X = maxX;\n                target_Y = maxY;\n            }\n        }\n        let cookieObj: CookieTypeObject = {\n            normalType: normalType,\n            extraType: extraType,\n            pos_X: target_X,\n            pos_Y: target_Y,\n            isOpetation: false,\n            isExtraTriger: false\n        }\n        \n        return cookieObj;\n    }\n\n    private comparison_function_X(x: CookieTypeObject, y: CookieTypeObject): number {\n        if (x.pos_X < y.pos_X) {\n            return -1;\n        } else if (x.pos_X > y.pos_X) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n    private comparison_function_Y(x: CookieTypeObject, y: CookieTypeObject): number {\n        if (x.pos_Y < y.pos_Y) {\n            return -1;\n        } else if (x.pos_Y > y.pos_Y) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    // public getExtraCookieTypeByChain(chains: Array<CookieTypeObject>): CookieTypeObject\n    // {\n    //     if (chains.length <= 0)\n    //     {\n    //         return null;\n    //     }\n\n    //     let orignalChains = chains;\n    //     let isSameType: boolean = true;\n    //     let hasChain: boolean = false;\n    //     let preCookieObj = chains[0];\n    //     let firstCookieObj = chains[0];\n    //     for (let index = 1; index < chains.length; index++) {\n    //         const element = chains[index];\n    //         if (preCookieObj.normalType != element.normalType)\n    //         {\n    //             isSameType = false;\n    //             break;\n    //         }\n    //     }\n    //     //检查是否有连续同类型\n    //     let continueChain_X: Array<CookieTypeObject> = [];\n    //     let continueChain_Y: Array<CookieTypeObject> = [];\n    //     continueChain_X.push(firstCookieObj);\n    //     continueChain_Y.push(firstCookieObj);\n    //     for (let index = 1; index < chains.length; index++) {\n    //         const element = chains[index];\n    //         if (element.normalType == preCookieObj.normalType)\n    //         {\n    //             if (element.pos_Y == firstCookieObj.pos_Y && Math.abs(element.pos_X - preCookieObj.pos_X) == 1)\n    //             {\n    //                 continueChain_X.push(element);\n    //             }\n    //             else \n    //             {\n    //                 // if (continueChain_X.length < 3)\n    //                 // {\n    //                 //     continueChain_X = [];\n    //                 //     continueChain_X.push(element);\n    //                 // }\n    //             }\n    //             if (element.pos_X == firstCookieObj.pos_X && Math.abs(element.pos_Y - preCookieObj.pos_Y) == 1)\n    //             {\n    //                 continueChain_Y.push(element);\n    //             }\n    //             else \n    //             {\n    //                 // if (continueChain_Y.length < 3)\n    //                 // {\n    //                 //     continueChain_Y = [];\n    //                 //     continueChain_Y.push(element);\n    //                 // }\n    //             }\n    //         }\n    //         preCookieObj = element;\n    //     }\n    //     if (continueChain_X.length >= 3) { hasChain = true; }\n    //     if (continueChain_Y.length >= 3) { hasChain = true; }\n    //     if (!isSameType)\n    //     {\n    //         if (continueChain_X.length > 3)\n    //         {\n    //             chains = continueChain_X;\n    //         }\n    //         else if (continueChain_Y.length > 3)\n    //         {\n    //             chains = continueChain_Y;\n    //         }\n    //         else\n    //         {\n    //             chains = [];\n    //         }\n    //     }\n    //     else\n    //     {\n    //         if (!hasChain) { return null; }\n    //     }\n    //     if (chains.length <= 0) { return null; }\n\n    //     let normalType = CookieType.CookieTypeCount;\n    //     let extraType = CookieExtraType.Extra_Normal;\n    //     let target_X = CookieMax_X;\n    //     let target_Y = CookieMax_Y;\n    //     let maxXArray: Array<number> = [];\n    //     let maxYArray: Array<number> = [];\n    //     let cookieNormalTypeArray: Array<CookieType> = [];\n    //     for (let index = 0; index < CookieMax_X; index++) {\n    //         maxXArray[index] = 0;\n    //     }\n    //     for (let index = 0; index < CookieMax_Y; index++) {\n    //         maxYArray[index] = 0;\n    //     }\n    //     for (let index = 0; index < CookieType.CookieTypeCount; index++) {\n    //         cookieNormalTypeArray.push(0);\n    //     }\n    //     let hasOpetation: Boolean = false;\n    //     for (let index = 0; index < chains.length; index++) {\n    //         const element = chains[index];\n    //         maxXArray[element.pos_X]++;\n    //         maxYArray[element.pos_Y]++;\n    //         cookieNormalTypeArray[element.normalType]++;\n    //         if (element.isOpetation)\n    //         {\n    //             hasOpetation = true;\n    //             target_X = element.pos_X;\n    //             target_Y = element.pos_Y;\n    //         }\n    //         if (index == 0)\n    //         {\n    //             normalType = element.normalType;\n    //         }\n    //     }\n    //     //  如果消除组不是同样的普通类型的无法产生特殊cookie\n    //     let cookieTypeCount = 0;\n    //     for (let index = 0; index < cookieNormalTypeArray.length; index++) {\n    //         const element = cookieNormalTypeArray[index];\n    //         if (element > 1)\n    //         {\n    //             cookieTypeCount++;\n    //         }\n    //     }\n    //     if (cookieTypeCount > 1)\n    //     {\n    //         return null;\n    //     }\n\n    //     let maxCountValueX = maxXArray[0];\n    //     let maxCountValueY = maxYArray[0];\n    //     let maxX = 0;\n    //     let maxY = 0;\n    //     for (let index = 1; index < maxXArray.length; index++) {\n    //         const element = maxXArray[index];\n    //         if (element > maxCountValueX)\n    //         {\n    //             maxCountValueX = element;\n    //             maxX = index;\n    //         }\n    //     }\n    //     for (let index = 0; index < maxYArray.length; index++) {\n    //         const element = maxYArray[index];\n    //         if (element > maxCountValueY)\n    //         {\n    //             maxCountValueY = element;\n    //             maxY = index;\n    //         }\n    //     }\n    //     // if ((maxCountValueX >= 5 || maxCountValueY >= 5) && cookieTypeCount >= 5)\n    //     if (maxCountValueX >= 5 || maxCountValueY >= 5)\n    //     {\n    //         extraType = CookieExtraType.Extra_All;\n    //         normalType = CookieType.NONE;\n    //     }\n    //     else if (maxCountValueX >= 3 && maxCountValueY >= 3)\n    //     {\n    //         extraType = CookieExtraType.Extra_Bomb;\n    //     }\n    //     else\n    //     {\n    //         extraType = maxCountValueX > 3 ? CookieExtraType.Extra_Line_Horizontal : CookieExtraType.Extra_Line_Vertical;\n    //     }\n    //     //掉落时自动产生的\n    //     if (!hasOpetation)\n    //     {\n    //         if (extraType == CookieExtraType.Extra_Line_Horizontal || extraType == CookieExtraType.Extra_Line_Vertical)\n    //         {\n    //             const element = chains[1];\n    //             target_X = element.pos_X;\n    //             target_Y = element.pos_Y;\n    //         }\n    //         else\n    //         {\n    //             target_X = maxX;\n    //             target_Y = maxY;\n    //         }\n    //     }\n    //     let cookieObj: CookieTypeObject = {\n    //         normalType: normalType,\n    //         extraType: extraType,\n    //         pos_X: target_X,\n    //         pos_Y: target_Y,\n    //         isOpetation: false,\n    //         isExtraTriger: false\n    //     }\n        \n    //     return cookieObj;\n    // }\n\n\n}\n\n"]}